#!/usr/bin/env python3
"""
Simple script to help set up environment configuration.
"""

import os
from pathlib import Path

def setup_environment():
    """Create .env file with user input."""
    env_file = Path(".env")
    
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    print("üöÄ Setting up Code Review Assistant environment...")
    print()
    
    # LLM Provider selection
    print("Choose your LLM provider:")
    print("1. Google Gemini (recommended)")
    print("2. OpenAI GPT")
    
    while True:
        choice = input("Enter choice (1 or 2): ").strip()
        if choice == "1":
            llm_provider = "gemini"
            break
        elif choice == "2":
            llm_provider = "openai"
            break
        else:
            print("Please enter 1 or 2")
    
    # Get API key
    if llm_provider == "gemini":
        api_key = input("Enter your Gemini API key: ").strip()
        if not api_key:
            print("‚ùå API key is required!")
            return
    else:
        api_key = input("Enter your OpenAI API key: ").strip()
        if not api_key:
            print("‚ùå API key is required!")
            return
    
    # Optional settings
    port = input("Port (default 8000): ").strip() or "8000"
    max_file_size = input("Max file size in MB (default 10): ").strip() or "10"
    
    # Create .env content
    env_content = f"""# Code Review Assistant Configuration
# Generated by setup_env.py

# API Configuration
HOST=0.0.0.0
PORT={port}
DEBUG=true

# LLM Provider Configuration
LLM_PROVIDER={llm_provider}

"""
    
    if llm_provider == "gemini":
        env_content += f"""# Gemini Configuration
GEMINI_API_KEY={api_key}
GEMINI_MODEL=gemini-pro
GEMINI_MAX_TOKENS=4000

# OpenAI Configuration (unused)
OPENAI_API_KEY=
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=4000
"""
    else:
        env_content += f"""# OpenAI Configuration
OPENAI_API_KEY={api_key}
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=4000

# Gemini Configuration (unused)
GEMINI_API_KEY=
GEMINI_MODEL=gemini-pro
GEMINI_MAX_TOKENS=4000
"""
    
    env_content += f"""
# Authentication
JWT_SECRET_KEY=your_jwt_secret_key_here
API_KEY_SALT=your_api_key_salt_here

# File Upload Configuration
MAX_FILE_SIZE_MB={max_file_size}
UPLOAD_DIR=./uploads
REPORTS_DIR=./reports

# Rate Limiting
RATE_LIMIT_REQUESTS_PER_MINUTE=10

# Database Configuration
DATABASE_URL=sqlite:///./code_review.db

# Security
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
CORS_ENABLED=true
"""
    
    # Write .env file
    with open(".env", "w") as f:
        f.write(env_content)
    
    print()
    print("‚úÖ Environment configuration created successfully!")
    print(f"üìÅ Configuration saved to: {env_file.absolute()}")
    print()
    print("üöÄ You can now start the application with:")
    print("   python main.py")
    print()
    print("üìñ API documentation will be available at:")
    print(f"   http://localhost:{port}/docs")


if __name__ == "__main__":
    setup_environment()